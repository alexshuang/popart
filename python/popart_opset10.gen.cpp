// Copyright (c) 2018 Graphcore Ltd. All rights reserved.
/*
 * THIS IS AN AUTOGENERATED FILE, DO NOT EDIT DIRECTLY
 *
 * To regenerate this file run the gen_operators.py script
 */
#include "common.hpp"

namespace py = pybind11;
using namespace popart;

PYBIND11_MODULE(popart_opset10, m) {
  py::class_<AiOnnxOpset10>(m, "AiOnnxOpset10")
      .def(
          "abs",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.abs(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "acos",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.acos(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "acosh",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.acosh(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "add",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.add(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "logical_and",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.logical_and(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "argmax",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.argmax(args, axis, keepdims, name);
          },
          py::arg("args"),
          py::arg("axis")        = 0,
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "argmin",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.argmin(args, axis, keepdims, name);
          },
          py::arg("args"),
          py::arg("axis")        = 0,
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "asin",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.asin(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "asinh",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.asinh(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "atan",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.atan(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "atanh",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.atanh(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "averagepool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &kernel_shape,
             int64_t ceil_mode,
             int64_t count_include_pad,
             const std::vector<int64_t> &pads,
             const std::vector<int64_t> &strides,
             const std::string &name) -> TensorId {
            return opset.averagepool(args,
                                     kernel_shape,
                                     ceil_mode,
                                     count_include_pad,
                                     pads,
                                     strides,
                                     name);
          },
          py::arg("args"),
          py::arg("kernel_shape"),
          py::arg("ceil_mode")         = 0,
          py::arg("count_include_pad") = 0,
          py::arg("pads")              = std::vector<int64_t>(),
          py::arg("strides")           = std::vector<int64_t>(),
          py::arg("debugPrefix")       = std::string())
      .def(
          "batchnormalization",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             float epsilon,
             float momentum,
             const std::string &name) -> std::vector<TensorId> {
            return opset.batchnormalization(
                args, num_outputs, epsilon, momentum, name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("epsilon")     = 1e-05f,
          py::arg("momentum")    = 0.9f,
          py::arg("debugPrefix") = std::string())
      .def(
          "cast",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &to,
             const std::string &name) -> TensorId {
            return opset.cast(args, to, name);
          },
          py::arg("args"),
          py::arg("to"),
          py::arg("debugPrefix") = std::string())
      .def(
          "ceil",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.ceil(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "clip",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float max,
             float min,
             const std::string &name) -> TensorId {
            return opset.clip(args, max, min, name);
          },
          py::arg("args"),
          py::arg("max")         = 3.4028234663852886e+38f,
          py::arg("min")         = -3.4028234663852886e+38f,
          py::arg("debugPrefix") = std::string())
      .def(
          "compress",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<int64_t> axis,
             const std::string &name) -> TensorId {
            return opset.compress(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = nonstd::optional<int64_t>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "concat",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.concat(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis"),
          py::arg("debugPrefix") = std::string())
      .def(
          "constant",
          [](AiOnnxOpset10 &opset, py::array array, const std::string &name) {
            array = makeContiguous(array);
            ConstVoidData initData;
            initData.data = array.request().ptr;
            initData.info = getTensorInfo(array);
            return opset.constant(initData, name);
          },
          py::arg("value"),
          py::arg("debugPrefix") = std::string())
      .def(
          "constantofshape",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             py::array array,
             const std::string &name) {
            ConstVoidData initData;
            initData.data = array.request().ptr;
            initData.info = getTensorInfo(array);
            return opset.constantofshape(args, initData, name);
          },
          py::arg("args"),
          py::arg("value"),
          py::arg("debugPrefix") = std::string())
      .def(
          "conv",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &dilations,
             int64_t group,
             const std::vector<int64_t> &kernel_shape,
             const std::vector<int64_t> &pads,
             const std::vector<int64_t> &strides,
             const std::string &name) -> TensorId {
            return opset.conv(
                args, dilations, group, kernel_shape, pads, strides, name);
          },
          py::arg("args"),
          py::arg("dilations")    = std::vector<int64_t>(),
          py::arg("group")        = 1,
          py::arg("kernel_shape") = std::vector<int64_t>(),
          py::arg("pads")         = std::vector<int64_t>(),
          py::arg("strides")      = std::vector<int64_t>(),
          py::arg("debugPrefix")  = std::string())
      .def(
          "convinteger",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &dilations,
             int64_t group,
             const std::vector<int64_t> &kernel_shape,
             const std::vector<int64_t> &pads,
             const std::vector<int64_t> &strides,
             const std::string &name) -> TensorId {
            return opset.convinteger(
                args, dilations, group, kernel_shape, pads, strides, name);
          },
          py::arg("args"),
          py::arg("dilations")    = std::vector<int64_t>(),
          py::arg("group")        = 1,
          py::arg("kernel_shape") = std::vector<int64_t>(),
          py::arg("pads")         = std::vector<int64_t>(),
          py::arg("strides")      = std::vector<int64_t>(),
          py::arg("debugPrefix")  = std::string())
      .def(
          "convtranspose",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &dilations,
             int64_t group,
             const std::vector<int64_t> &kernel_shape,
             const std::vector<int64_t> &output_padding,
             const std::vector<int64_t> &output_shape,
             const std::vector<int64_t> &pads,
             const std::vector<int64_t> &strides,
             const std::string &name) -> TensorId {
            return opset.convtranspose(args,
                                       dilations,
                                       group,
                                       kernel_shape,
                                       output_padding,
                                       output_shape,
                                       pads,
                                       strides,
                                       name);
          },
          py::arg("args"),
          py::arg("dilations")      = std::vector<int64_t>(),
          py::arg("group")          = 1,
          py::arg("kernel_shape")   = std::vector<int64_t>(),
          py::arg("output_padding") = std::vector<int64_t>(),
          py::arg("output_shape")   = std::vector<int64_t>(),
          py::arg("pads")           = std::vector<int64_t>(),
          py::arg("strides")        = std::vector<int64_t>(),
          py::arg("debugPrefix")    = std::string())
      .def(
          "cos",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.cos(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "cosh",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.cosh(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "depthtospace",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t blocksize,
             const std::string &name) -> TensorId {
            return opset.depthtospace(args, blocksize, name);
          },
          py::arg("args"),
          py::arg("blocksize"),
          py::arg("debugPrefix") = std::string())
      .def(
          "dequantizelinear",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.dequantizelinear(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "div",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.div(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "dropout",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             float ratio,
             const std::string &name) -> std::vector<TensorId> {
            return opset.dropout(args, num_outputs, ratio, name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("ratio")       = 0.5f,
          py::arg("debugPrefix") = std::string())
      .def(
          "elu",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float alpha,
             const std::string &name) -> TensorId {
            return opset.elu(args, alpha, name);
          },
          py::arg("args"),
          py::arg("alpha")       = 1.0f,
          py::arg("debugPrefix") = std::string())
      .def(
          "equal",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.equal(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "erf",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.erf(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "exp",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.exp(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "expand",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.expand(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "eyelike",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<int64_t> dtype,
             int64_t k,
             const std::string &name) -> TensorId {
            return opset.eyelike(args, dtype, k, name);
          },
          py::arg("args"),
          py::arg("dtype")       = nonstd::optional<int64_t>(),
          py::arg("k")           = 0,
          py::arg("debugPrefix") = std::string())
      .def(
          "flatten",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.flatten(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "floor",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.floor(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "gru",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             const std::vector<float> &activation_alpha,
             const std::vector<float> &activation_beta,
             const std::vector<std::string> &activations,
             nonstd::optional<float> clip,
             const std::string &direction,
             nonstd::optional<int64_t> hidden_size,
             int64_t linear_before_reset,
             const std::string &name) -> std::vector<TensorId> {
            return opset.gru(args,
                             num_outputs,
                             activation_alpha,
                             activation_beta,
                             activations,
                             clip,
                             direction,
                             hidden_size,
                             linear_before_reset,
                             name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("activation_alpha")    = std::vector<float>(),
          py::arg("activation_beta")     = std::vector<float>(),
          py::arg("activations")         = std::vector<std::string>(),
          py::arg("clip")                = nonstd::optional<float>(),
          py::arg("direction")           = "forward",
          py::arg("hidden_size")         = nonstd::optional<int64_t>(),
          py::arg("linear_before_reset") = 0,
          py::arg("debugPrefix")         = std::string())
      .def(
          "gather",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.gather(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = 0,
          py::arg("debugPrefix") = std::string())
      .def(
          "gemm",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float alpha,
             float beta,
             int64_t transA,
             int64_t transB,
             const std::string &name) -> TensorId {
            return opset.gemm(args, alpha, beta, transA, transB, name);
          },
          py::arg("args"),
          py::arg("alpha")       = 1.0f,
          py::arg("beta")        = 1.0f,
          py::arg("transA")      = 0,
          py::arg("transB")      = 0,
          py::arg("debugPrefix") = std::string())
      .def(
          "globalaveragepool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.globalaveragepool(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "globallppool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t p,
             const std::string &name) -> TensorId {
            return opset.globallppool(args, p, name);
          },
          py::arg("args"),
          py::arg("p")           = 2,
          py::arg("debugPrefix") = std::string())
      .def(
          "globalmaxpool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.globalmaxpool(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "greater",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.greater(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "hardsigmoid",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float alpha,
             float beta,
             const std::string &name) -> TensorId {
            return opset.hardsigmoid(args, alpha, beta, name);
          },
          py::arg("args"),
          py::arg("alpha")       = 0.2f,
          py::arg("beta")        = 0.5f,
          py::arg("debugPrefix") = std::string())
      .def(
          "hardmax",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.hardmax(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "identity",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.identity(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "logical_if",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             const Builder &else_branch,
             const Builder &then_branch,
             const std::string &name) -> std::vector<TensorId> {
            return opset.logical_if(
                args, num_outputs, else_branch, then_branch, name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("else_branch"),
          py::arg("then_branch"),
          py::arg("debugPrefix") = std::string())
      .def(
          "instancenormalization",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float epsilon,
             const std::string &name) -> TensorId {
            return opset.instancenormalization(args, epsilon, name);
          },
          py::arg("args"),
          py::arg("epsilon")     = 1e-05f,
          py::arg("debugPrefix") = std::string())
      .def(
          "isinf",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t detect_negative,
             int64_t detect_positive,
             const std::string &name) -> TensorId {
            return opset.isinf(args, detect_negative, detect_positive, name);
          },
          py::arg("args"),
          py::arg("detect_negative") = 1,
          py::arg("detect_positive") = 1,
          py::arg("debugPrefix")     = std::string())
      .def(
          "isnan",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.isnan(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "lrn",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t size,
             float alpha,
             float beta,
             float bias,
             const std::string &name) -> TensorId {
            return opset.lrn(args, size, alpha, beta, bias, name);
          },
          py::arg("args"),
          py::arg("size"),
          py::arg("alpha")       = 0.0001f,
          py::arg("beta")        = 0.75f,
          py::arg("bias")        = 1.0f,
          py::arg("debugPrefix") = std::string())
      .def(
          "lstm",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             const std::vector<float> &activation_alpha,
             const std::vector<float> &activation_beta,
             const std::vector<std::string> &activations,
             nonstd::optional<float> clip,
             const std::string &direction,
             nonstd::optional<int64_t> hidden_size,
             int64_t input_forget,
             const std::string &name) -> std::vector<TensorId> {
            return opset.lstm(args,
                              num_outputs,
                              activation_alpha,
                              activation_beta,
                              activations,
                              clip,
                              direction,
                              hidden_size,
                              input_forget,
                              name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("activation_alpha") = std::vector<float>(),
          py::arg("activation_beta")  = std::vector<float>(),
          py::arg("activations")      = std::vector<std::string>(),
          py::arg("clip")             = nonstd::optional<float>(),
          py::arg("direction")        = "forward",
          py::arg("hidden_size")      = nonstd::optional<int64_t>(),
          py::arg("input_forget")     = 0,
          py::arg("debugPrefix")      = std::string())
      .def(
          "leakyrelu",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float alpha,
             const std::string &name) -> TensorId {
            return opset.leakyrelu(args, alpha, name);
          },
          py::arg("args"),
          py::arg("alpha")       = 0.01f,
          py::arg("debugPrefix") = std::string())
      .def(
          "less",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.less(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "log",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.log(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "logsoftmax",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.logsoftmax(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "loop",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             const Builder &body,
             const std::string &name) -> std::vector<TensorId> {
            return opset.loop(args, num_outputs, body, name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("body"),
          py::arg("debugPrefix") = std::string())
      .def(
          "lpnormalization",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             int64_t p,
             const std::string &name) -> TensorId {
            return opset.lpnormalization(args, axis, p, name);
          },
          py::arg("args"),
          py::arg("axis")        = -1,
          py::arg("p")           = 2,
          py::arg("debugPrefix") = std::string())
      .def(
          "lppool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &kernel_shape,
             int64_t p,
             const std::vector<int64_t> &pads,
             const std::vector<int64_t> &strides,
             const std::string &name) -> TensorId {
            return opset.lppool(args, kernel_shape, p, pads, strides, name);
          },
          py::arg("args"),
          py::arg("kernel_shape"),
          py::arg("p")           = 2,
          py::arg("pads")        = std::vector<int64_t>(),
          py::arg("strides")     = std::vector<int64_t>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "matmul",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.matmul(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "matmulinteger",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.matmulinteger(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "max",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.max(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "maxpool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             const std::vector<int64_t> &kernel_shape,
             int64_t ceil_mode,
             const std::vector<int64_t> &dilations,
             const std::vector<int64_t> &pads,
             int64_t storage_order,
             const std::vector<int64_t> &strides,
             const std::string &name) -> std::vector<TensorId> {
            return opset.maxpool(args,
                                 num_outputs,
                                 kernel_shape,
                                 ceil_mode,
                                 dilations,
                                 pads,
                                 storage_order,
                                 strides,
                                 name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("kernel_shape"),
          py::arg("ceil_mode")     = 0,
          py::arg("dilations")     = std::vector<int64_t>(),
          py::arg("pads")          = std::vector<int64_t>(),
          py::arg("storage_order") = 0,
          py::arg("strides")       = std::vector<int64_t>(),
          py::arg("debugPrefix")   = std::string())
      .def(
          "maxroipool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &pooled_shape,
             float spatial_scale,
             const std::string &name) -> TensorId {
            return opset.maxroipool(args, pooled_shape, spatial_scale, name);
          },
          py::arg("args"),
          py::arg("pooled_shape"),
          py::arg("spatial_scale") = 1.0f,
          py::arg("debugPrefix")   = std::string())
      .def(
          "maxunpool",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &kernel_shape,
             const std::vector<int64_t> &pads,
             const std::vector<int64_t> &strides,
             const std::string &name) -> TensorId {
            return opset.maxunpool(args, kernel_shape, pads, strides, name);
          },
          py::arg("args"),
          py::arg("kernel_shape"),
          py::arg("pads")        = std::vector<int64_t>(),
          py::arg("strides")     = std::vector<int64_t>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "mean",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.mean(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "meanvariancenormalization",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &axes,
             const std::string &name) -> TensorId {
            return opset.meanvariancenormalization(args, axes, name);
          },
          py::arg("args"),
          py::arg("axes")        = std::vector<int64_t>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "min",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.min(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "mod",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t fmod,
             const std::string &name) -> TensorId {
            return opset.mod(args, fmod, name);
          },
          py::arg("args"),
          py::arg("fmod")        = 0,
          py::arg("debugPrefix") = std::string())
      .def(
          "mul",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.mul(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "multinomial",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t dtype,
             int64_t sample_size,
             nonstd::optional<float> seed,
             const std::string &name) -> TensorId {
            return opset.multinomial(args, dtype, sample_size, seed, name);
          },
          py::arg("args"),
          py::arg("dtype")       = 6,
          py::arg("sample_size") = 1,
          py::arg("seed")        = nonstd::optional<float>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "neg",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.neg(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "nonmaxsuppression",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t center_point_box,
             const std::string &name) -> TensorId {
            return opset.nonmaxsuppression(args, center_point_box, name);
          },
          py::arg("args"),
          py::arg("center_point_box") = 0,
          py::arg("debugPrefix")      = std::string())
      .def(
          "nonzero",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.nonzero(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "logical_not",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.logical_not(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "onehot",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.onehot(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = -1,
          py::arg("debugPrefix") = std::string())
      .def(
          "logical_or",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.logical_or(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "prelu",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.prelu(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "pad",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &pads,
             const std::string &mode,
             float value,
             const std::string &name) -> TensorId {
            return opset.pad(args, pads, mode, value, name);
          },
          py::arg("args"),
          py::arg("pads"),
          py::arg("mode")        = "constant",
          py::arg("value")       = 0.0f,
          py::arg("debugPrefix") = std::string())
      .def(
          "pow",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.pow(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "qlinearconv",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &dilations,
             int64_t group,
             const std::vector<int64_t> &kernel_shape,
             const std::vector<int64_t> &pads,
             const std::vector<int64_t> &strides,
             const std::string &name) -> TensorId {
            return opset.qlinearconv(
                args, dilations, group, kernel_shape, pads, strides, name);
          },
          py::arg("args"),
          py::arg("dilations")    = std::vector<int64_t>(),
          py::arg("group")        = 1,
          py::arg("kernel_shape") = std::vector<int64_t>(),
          py::arg("pads")         = std::vector<int64_t>(),
          py::arg("strides")      = std::vector<int64_t>(),
          py::arg("debugPrefix")  = std::string())
      .def(
          "qlinearmatmul",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.qlinearmatmul(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "quantizelinear",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.quantizelinear(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "rnn",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             const std::vector<float> &activation_alpha,
             const std::vector<float> &activation_beta,
             const std::vector<std::string> &activations,
             nonstd::optional<float> clip,
             const std::string &direction,
             nonstd::optional<int64_t> hidden_size,
             const std::string &name) -> std::vector<TensorId> {
            return opset.rnn(args,
                             num_outputs,
                             activation_alpha,
                             activation_beta,
                             activations,
                             clip,
                             direction,
                             hidden_size,
                             name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("activation_alpha") = std::vector<float>(),
          py::arg("activation_beta")  = std::vector<float>(),
          py::arg("activations")      = std::vector<std::string>(),
          py::arg("clip")             = nonstd::optional<float>(),
          py::arg("direction")        = "forward",
          py::arg("hidden_size")      = nonstd::optional<int64_t>(),
          py::arg("debugPrefix")      = std::string())
      .def(
          "randomnormal",
          [](AiOnnxOpset10 &opset,
             const std::vector<int64_t> &shape,
             int64_t dtype,
             float mean,
             float scale,
             nonstd::optional<float> seed,
             const std::string &name) -> TensorId {
            return opset.randomnormal(shape, dtype, mean, scale, seed, name);
          },
          py::arg("shape"),
          py::arg("dtype")       = 1,
          py::arg("mean")        = 0.0f,
          py::arg("scale")       = 1.0f,
          py::arg("seed")        = nonstd::optional<float>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "randomnormallike",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<int64_t> dtype,
             float mean,
             float scale,
             nonstd::optional<float> seed,
             const std::string &name) -> TensorId {
            return opset.randomnormallike(args, dtype, mean, scale, seed, name);
          },
          py::arg("args"),
          py::arg("dtype")       = nonstd::optional<int64_t>(),
          py::arg("mean")        = 0.0f,
          py::arg("scale")       = 1.0f,
          py::arg("seed")        = nonstd::optional<float>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "randomuniform",
          [](AiOnnxOpset10 &opset,
             const std::vector<int64_t> &shape,
             int64_t dtype,
             float high,
             float low,
             nonstd::optional<float> seed,
             const std::string &name) -> TensorId {
            return opset.randomuniform(shape, dtype, high, low, seed, name);
          },
          py::arg("shape"),
          py::arg("dtype")       = 1,
          py::arg("high")        = 1.0f,
          py::arg("low")         = 0.0f,
          py::arg("seed")        = nonstd::optional<float>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "randomuniformlike",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<int64_t> dtype,
             float high,
             float low,
             nonstd::optional<float> seed,
             const std::string &name) -> TensorId {
            return opset.randomuniformlike(args, dtype, high, low, seed, name);
          },
          py::arg("args"),
          py::arg("dtype")       = nonstd::optional<int64_t>(),
          py::arg("high")        = 1.0f,
          py::arg("low")         = 0.0f,
          py::arg("seed")        = nonstd::optional<float>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "reciprocal",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.reciprocal(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "reducel1",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducel1(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducel2",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducel2(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducelogsum",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducelogsum(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducelogsumexp",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducelogsumexp(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducemax",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducemax(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducemean",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducemean(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducemin",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducemin(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reduceprod",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reduceprod(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducesum",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducesum(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "reducesumsquare",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             nonstd::optional<std::vector<int64_t>> axes,
             int64_t keepdims,
             const std::string &name) -> TensorId {
            return opset.reducesumsquare(args, axes, keepdims, name);
          },
          py::arg("args"),
          py::arg("axes")        = nonstd::optional<std::vector<int64_t>>(),
          py::arg("keepdims")    = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "relu",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.relu(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "reshape",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.reshape(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "resize",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &mode,
             const std::string &name) -> TensorId {
            return opset.resize(args, mode, name);
          },
          py::arg("args"),
          py::arg("mode")        = "nearest",
          py::arg("debugPrefix") = std::string())
      .def(
          "reversesequence",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t batch_axis,
             int64_t time_axis,
             const std::string &name) -> TensorId {
            return opset.reversesequence(args, batch_axis, time_axis, name);
          },
          py::arg("args"),
          py::arg("batch_axis")  = 1,
          py::arg("time_axis")   = 0,
          py::arg("debugPrefix") = std::string())
      .def(
          "roialign",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &mode,
             int64_t output_height,
             int64_t output_width,
             int64_t sampling_ratio,
             float spatial_scale,
             const std::string &name) -> TensorId {
            return opset.roialign(args,
                                  mode,
                                  output_height,
                                  output_width,
                                  sampling_ratio,
                                  spatial_scale,
                                  name);
          },
          py::arg("args"),
          py::arg("mode")           = "avg",
          py::arg("output_height")  = 1,
          py::arg("output_width")   = 1,
          py::arg("sampling_ratio") = 0,
          py::arg("spatial_scale")  = 1.0f,
          py::arg("debugPrefix")    = std::string())
      .def(
          "scan",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             const Builder &body,
             int64_t num_scan_inputs,
             const std::vector<int64_t> &scan_input_axes,
             const std::vector<int64_t> &scan_input_directions,
             const std::vector<int64_t> &scan_output_axes,
             const std::vector<int64_t> &scan_output_directions,
             const std::string &name) -> std::vector<TensorId> {
            return opset.scan(args,
                              num_outputs,
                              body,
                              num_scan_inputs,
                              scan_input_axes,
                              scan_input_directions,
                              scan_output_axes,
                              scan_output_directions,
                              name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("body"),
          py::arg("num_scan_inputs"),
          py::arg("scan_input_axes")        = std::vector<int64_t>(),
          py::arg("scan_input_directions")  = std::vector<int64_t>(),
          py::arg("scan_output_axes")       = std::vector<int64_t>(),
          py::arg("scan_output_directions") = std::vector<int64_t>(),
          py::arg("debugPrefix")            = std::string())
      .def(
          "scatter",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.scatter(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = 0,
          py::arg("debugPrefix") = std::string())
      .def(
          "selu",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float alpha,
             float gamma,
             const std::string &name) -> TensorId {
            return opset.selu(args, alpha, gamma, name);
          },
          py::arg("args"),
          py::arg("alpha")       = 1.67326f,
          py::arg("gamma")       = 1.0507f,
          py::arg("debugPrefix") = std::string())
      .def(
          "shape",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.shape(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "shrink",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float bias,
             float lambd,
             const std::string &name) -> TensorId {
            return opset.shrink(args, bias, lambd, name);
          },
          py::arg("args"),
          py::arg("bias")        = 0.0f,
          py::arg("lambd")       = 0.5f,
          py::arg("debugPrefix") = std::string())
      .def(
          "sigmoid",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.sigmoid(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "sign",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.sign(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "sin",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.sin(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "sinh",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.sinh(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "size",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.size(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "slice",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.slice(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "softmax",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> TensorId {
            return opset.softmax(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = 1,
          py::arg("debugPrefix") = std::string())
      .def(
          "softplus",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.softplus(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "softsign",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.softsign(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "spacetodepth",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t blocksize,
             const std::string &name) -> TensorId {
            return opset.spacetodepth(args, blocksize, name);
          },
          py::arg("args"),
          py::arg("blocksize"),
          py::arg("debugPrefix") = std::string())
      .def(
          "split",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             unsigned num_outputs,
             int64_t axis,
             const std::vector<int64_t> &split,
             const std::string &name) -> std::vector<TensorId> {
            return opset.split(args, num_outputs, axis, split, name);
          },
          py::arg("args"),
          py::arg("num_outputs"),
          py::arg("axis")        = 0,
          py::arg("split")       = std::vector<int64_t>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "sqrt",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.sqrt(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "squeeze",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &axes,
             const std::string &name) -> TensorId {
            return opset.squeeze(args, axes, name);
          },
          py::arg("args"),
          py::arg("axes")        = std::vector<int64_t>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "stringnormalizer",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &case_change_action,
             int64_t is_case_sensitive,
             nonstd::optional<std::string> locale,
             const std::vector<std::string> &stopwords,
             const std::string &name) -> TensorId {
            return opset.stringnormalizer(args,
                                          case_change_action,
                                          is_case_sensitive,
                                          locale,
                                          stopwords,
                                          name);
          },
          py::arg("args"),
          py::arg("case_change_action") = "NONE",
          py::arg("is_case_sensitive")  = 0,
          py::arg("locale")             = std::string(),
          py::arg("stopwords")          = std::vector<std::string>(),
          py::arg("debugPrefix")        = std::string())
      .def(
          "sub",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.sub(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "sum",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.sum(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "tan",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.tan(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "tanh",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.tanh(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "tfidfvectorizer",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t max_gram_length,
             int64_t max_skip_count,
             int64_t min_gram_length,
             const std::string &mode,
             const std::vector<int64_t> &ngram_counts,
             const std::vector<int64_t> &ngram_indexes,
             const std::vector<int64_t> &pool_int64s,
             const std::vector<std::string> &pool_strings,
             const std::vector<float> &weights,
             const std::string &name) -> TensorId {
            return opset.tfidfvectorizer(args,
                                         max_gram_length,
                                         max_skip_count,
                                         min_gram_length,
                                         mode,
                                         ngram_counts,
                                         ngram_indexes,
                                         pool_int64s,
                                         pool_strings,
                                         weights,
                                         name);
          },
          py::arg("args"),
          py::arg("max_gram_length"),
          py::arg("max_skip_count"),
          py::arg("min_gram_length"),
          py::arg("mode"),
          py::arg("ngram_counts"),
          py::arg("ngram_indexes"),
          py::arg("pool_int64s")  = std::vector<int64_t>(),
          py::arg("pool_strings") = std::vector<std::string>(),
          py::arg("weights")      = std::vector<float>(),
          py::arg("debugPrefix")  = std::string())
      .def(
          "thresholdedrelu",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             float alpha,
             const std::string &name) -> TensorId {
            return opset.thresholdedrelu(args, alpha, name);
          },
          py::arg("args"),
          py::arg("alpha")       = 1.0f,
          py::arg("debugPrefix") = std::string())
      .def(
          "tile",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.tile(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "topk",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             int64_t axis,
             const std::string &name) -> std::vector<TensorId> {
            return opset.topk(args, axis, name);
          },
          py::arg("args"),
          py::arg("axis")        = -1,
          py::arg("debugPrefix") = std::string())
      .def(
          "transpose",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &perm,
             const std::string &name) -> TensorId {
            return opset.transpose(args, perm, name);
          },
          py::arg("args"),
          py::arg("perm")        = std::vector<int64_t>(),
          py::arg("debugPrefix") = std::string())
      .def(
          "unsqueeze",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::vector<int64_t> &axes,
             const std::string &name) -> TensorId {
            return opset.unsqueeze(args, axes, name);
          },
          py::arg("args"),
          py::arg("axes"),
          py::arg("debugPrefix") = std::string())
      .def(
          "upsample",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &mode,
             const std::string &name) -> TensorId {
            return opset.upsample(args, mode, name);
          },
          py::arg("args"),
          py::arg("mode")        = "nearest",
          py::arg("debugPrefix") = std::string())
      .def(
          "where",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.where(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string())
      .def(
          "logical_xor",
          [](AiOnnxOpset10 &opset,
             const std::vector<TensorId> &args,
             const std::string &name) -> TensorId {
            return opset.logical_xor(args, name);
          },
          py::arg("args"),
          py::arg("debugPrefix") = std::string());
}
