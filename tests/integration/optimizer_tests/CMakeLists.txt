# Copyright (c) 2021 Graphcore Ltd. All rights reserved.
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_0 sgd_mixed_mode_test_cpp_0.cpp VARIANTS IpuModel)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_10 sgd_mixed_mode_test_cpp_1_10.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_9 sgd_mixed_mode_test_cpp_1_9.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_8 sgd_mixed_mode_test_cpp_1_8.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_7 sgd_mixed_mode_test_cpp_1_7.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_6 sgd_mixed_mode_test_cpp_1_6.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_5 sgd_mixed_mode_test_cpp_1_5.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_4 sgd_mixed_mode_test_cpp_1_4.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_3 sgd_mixed_mode_test_cpp_1_3.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_2 sgd_mixed_mode_test_cpp_1_2.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_1 sgd_mixed_mode_test_cpp_1_1.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_test_cpp_1_0 sgd_mixed_mode_test_cpp_1_0.cpp)
add_popart_cpp_unit_test(sgd_mixed_mode_compatibility_test_0 sgd_mixed_mode_compatibility_test_0.cpp)

add_popart_py_unit_test(adam_mixed_mode_test_py_0 adam_mixed_mode_test_py_0.py)
add_popart_py_unit_test(adaptive_mixed_mode_test_py_0 adaptive_mixed_mode_test_py_0.py)
add_popart_py_unit_test(pytorch_comparisons pytorch_comparisons.py VARIANTS IpuModel)
add_popart_py_unit_test(rmsprop_tf_mode_test rmsprop_tf_mode_test.py)
add_popart_py_unit_test(sgd_mixed_mode_test_py_0 sgd_mixed_mode_test_py_0.py)
add_popart_py_unit_test(sgd_mixed_mode_test_py_1 sgd_mixed_mode_test_py_1.py)
add_popart_py_unit_test(sgd1_accumulator_test sgd1_accumulator_test.py)

# global_batch_size_test starts here
set(batchserial_options "Unroll" "Loop")
set(explicit_loops_options "True" "False")
set(reduction_types "Sum" "MeanRunning" "MeanPost")
set(optimizers "SGD" "SGDM1" "SGDM2" "ADAM")

foreach(optimizer ${optimizers})
  foreach(reduction_type ${reduction_types})
    foreach(batchserial ${batchserial_options})
      foreach(explicit_loops ${explicit_loops_options})
# linter complains if this is indented
add_popart_py_unit_test(global_batch_size_test global_batch_size_test.py VARIANTS Hw MATCHEXPR "[${optimizer}-${reduction_type}-${batchserial}-${explicit_loops}]")
      endforeach()
    endforeach()
  endforeach()
endforeach()