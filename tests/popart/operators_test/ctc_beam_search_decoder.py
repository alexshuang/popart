# Copyright (c) 2021 Graphcore Ltd. All rights reserved.
import numpy as np
import pytest

from op_tester import op_tester


def reference_data_generator():
    """Generate reference data for the CTC beam search decoder tests.

    The popnn CTC beam search decoder is tested against TensorFlow's
    tf.nn.ctc_beam_search_decoder. Since TensorFlow is not a dependency for 
    PopART, it can't be directly used to test for correctness of our 
    implementation. Instead, this data is generated elsewhere and copied here. 
    TensorFlow 2.4.1 with the program below were used to generate this data::

        import tensorflow as tf
        import numpy as np
        import torch
        import torch.nn.functional as F
        from scipy.special import softmax

        def generate_reference_data(beam_width: int, top_paths: int,
                                    max_time: int, batch_size: int,
                                    num_classes: int):
            logits_data = torch.rand(max_time, batch_size, num_classes)
            log_probs_data = F.log_softmax(logits_data, 2,
                                           dtype=torch.float32).numpy()
            data_lengths_data = np.full((batch_size, ), max_time, np.uint32)
            decoded, label_probs = tf.nn.ctc_beam_search_decoder(
                log_probs_data, data_lengths_data, beam_width, top_paths)
            label_probs = label_probs.numpy()
            label_lengths = np.empty((batch_size, top_paths), dtype=np.int)
            for p in range(top_paths):
                for b in range(batch_size):
                    label_lengths[b, p] = sum(
                        decoded[p].indices.numpy()[:, 0] == b)
            decoded_labels = np.zeros((batch_size, top_paths, max_time),
                                      dtype=np.int)
            for p in range(top_paths):
                data = tf.sparse.to_dense(decoded[p]).numpy()
            decoded_labels[:, p, :data.shape[1]] = data

            arr2str = lambda x: np.array2string(
                x, max_line_width=np.inf, separator=', ').replace('\n', '')

            result = 'yield [\n'
            result += '    # ' + ', '.join([
                f'{str(i)}' for i in [
                    'beam_width', 'top_paths', 'max_time', 'batch_size',
                    'num_classes'
                ]
            ]) + '\n'
            result += '    ' + ''.join([
                f'{str(i) + ", "}' for i in
                [beam_width, top_paths, max_time, batch_size, num_classes]
            ]) + '\n'
            result += '    # log_probs_data\n'
            result += '    ' + arr2str(log_probs_data) + ',\n'
            result += '    # label_probs\n'
            result += '    ' + arr2str(label_probs) + ',\n'
            result += '    # label_lengths\n'
            result += '    ' + arr2str(label_lengths) + ',\n'
            result += '    # decoded_labels\n'
            result += '    ' + arr2str(decoded_labels) + ',\n'
            result += ']'

            return result


    Yields:
        list: The reference data.
    """
    # yapf:disable
    yield [
        # beam_width, top_paths, max_time, batch_size, num_classes
        10, 1, 10, 5, 15,
        # log_probs_data
        [[[-2.5306106, -3.1316235, -2.8108997, -2.6870472, -2.9506474, -2.6343126, -2.4575186, -3.054012 , -2.936293 , -3.1642027, -2.706205 , -2.4845774, -2.3316386, -2.7576547, -2.4582763],  [-3.2133548, -2.741343 , -2.8248074, -2.9607291, -2.267605 , -2.4182587, -3.1471517, -3.1845329, -2.9647114, -2.56075  , -2.493261 , -2.471644 , -2.3439581, -3.0504954, -2.6883261],  [-2.9458418, -2.9655747, -2.718184 , -2.7670267, -3.1281264, -2.7302928, -2.482591 , -2.2746007, -2.8581448, -2.3849032, -2.834856 , -3.0908213, -2.2905478, -2.8412004, -2.8391955],  [-2.8014376, -2.2661848, -2.9303794, -2.8496192, -2.6877196, -3.0442083, -2.5218577, -2.295882 , -2.5360663, -2.8370833, -2.8125124, -3.2068863, -3.1109972, -2.8539143, -2.4396715],  [-2.220024 , -2.7201352, -2.7330697, -2.342999 , -2.7899547, -3.026198 , -2.40196  , -2.9012814, -3.0411782, -2.680792 , -3.0177565, -3.0750513, -2.9607084, -2.7284791, -2.5186768]], [[-2.9932094, -3.264223 , -2.9562247, -2.320969 , -2.901507 , -3.1510732, -2.9731884, -2.3357394, -2.7062957, -2.8561335, -2.2968843, -2.73448  , -2.7099771, -2.2932622, -2.8373687],  [-2.8574696, -2.3693264, -2.6108913, -3.1201553, -2.4493487, -2.9789789, -3.1955643, -2.3274734, -3.138744 , -2.9822805, -2.8490987, -2.7723427, -2.8265946, -2.3973749, -2.3952875],  [-3.144112 , -3.1631355, -3.1885517, -2.2831373, -2.7598839, -2.9467354, -3.0291047, -2.633892 , -2.5561867, -2.4123511, -2.2956715, -2.2546859, -3.032576 , -2.725669 , -3.017145 ],  [-2.9103036, -2.7155123, -2.4495182, -2.9543507, -3.0117881, -2.8623624, -2.5232015, -2.7159948, -2.3552208, -3.179955 , -2.5481663, -2.3512158, -2.4149413, -3.1649933, -3.0636272],  [-2.763454 , -2.7684798, -2.4729912, -2.3630505, -2.80379  , -2.917763 , -2.4982486, -3.0950062, -2.9989524, -2.7093253, -2.8549929, -2.468616 , -2.8699899, -2.7177353, -2.628825 ]], [[-2.7921796, -2.9101985, -2.438107 , -2.4707878, -2.8257637, -3.0695596, -2.913371 , -2.4035451, -2.4568093, -2.9124837, -2.4760864, -2.8083415, -2.7787223, -2.9845986, -2.7348113],  [-2.6578362, -2.4270627, -3.028891 , -2.5832214, -2.944316 , -3.0179348, -3.0490823, -2.6337092, -2.4599192, -2.5011315, -2.4356403, -2.7681005, -2.8844995, -2.6615257, -2.9286408],  [-2.7547119, -2.5874026, -2.6225944, -3.1465216, -2.2175384, -2.261647 , -2.9163268, -3.1182365, -2.6193488, -2.579548 , -2.826039 , -2.9220524, -2.6546323, -2.996657 , -2.9543636],  [-2.6990855, -2.802496 , -2.6572897, -2.4361875, -2.863905 , -2.6888728, -2.5020857, -3.1720366, -2.5259633, -2.5163298, -3.049989 , -2.4682329, -3.0882711, -3.0976415, -2.5005403],  [-2.5384607, -2.8064313, -3.16537  , -2.4852026, -2.6476417, -3.0688944, -2.7889972, -2.4091752, -2.5592775, -3.000305 , -2.7757564, -2.9471297, -2.4403777, -2.5357475, -2.8444455]], [[-2.7810025, -3.0865846, -2.8330522, -2.4772766, -3.201937 , -2.6585827, -2.2466671, -2.5071845, -2.4740293, -2.8577232, -2.7645674, -3.1493452, -2.9643707, -2.5967681, -2.551716 ],  [-2.4265833, -3.0030818, -2.5778048, -2.9975097, -3.090079 , -2.9131334, -3.061443 , -2.626579 , -2.6426568, -2.4005027, -2.4602861, -2.62392  , -2.5284648, -2.5681977, -3.1942024],  [-3.028663 , -3.2058244, -3.0875237, -2.6974277, -2.3261175, -2.4514256, -3.0011897, -2.6814206, -2.453505 , -2.6934333, -3.2065182, -2.736311 , -2.5939848, -2.7157564, -2.3409176],  [-2.4284976, -3.1251426, -2.4656138, -3.2932458, -3.1296148, -2.6430283, -2.8305874, -2.4139643, -2.5482697, -2.9522755, -2.3676164, -3.2045918, -2.7525778, -2.686185 , -2.454904 ],  [-2.3377423, -2.5831254, -3.0497699, -2.4249053, -2.4827192, -2.8367991, -2.4679995, -2.7472904, -2.8704233, -2.6724691, -2.8255467, -2.967851 , -2.7543604, -2.8302758, -3.1704664]], [[-3.1939363, -2.6632538, -3.022254 , -2.8153222, -2.3859997, -2.458682 , -2.5497632, -2.5612993, -2.488988 , -3.1628602, -2.362281 , -3.1962366, -3.151555 , -3.0323708, -2.338869 ],  [-2.5067887, -2.6465387, -2.4967933, -3.2642107, -3.263569 , -2.630897 , -2.9233928, -2.5474005, -3.1415389, -2.3132777, -3.2228615, -2.5318482, -2.5232615, -3.0548134, -2.344841 ],  [-2.5339572, -3.0227737, -3.0206952, -2.411849 , -2.9176512, -2.7616186, -2.56531  , -2.5612023, -3.0448616, -2.4181075, -2.6428626, -2.6335113, -3.026825 , -2.5690932, -2.856574 ],  [-2.4450884, -2.5432785, -2.4379635, -2.8675466, -2.4746912, -2.4150043, -2.6887136, -2.831194 , -3.1263938, -3.0577238, -2.5116558, -3.1061482, -3.045544 , -2.544639 , -3.0537672],  [-3.1349883, -2.6371212, -2.532446 , -3.20148  , -2.684317 , -3.133824 , -2.5372877, -2.4747133, -2.5799942, -2.259966 , -2.8452826, -2.9471354, -2.6129622, -2.5981684, -2.971684 ]], [[-3.057703 , -2.88081  , -2.5211787, -2.5172935, -2.9499972, -2.3056824, -3.1001956, -2.786606 , -2.60647  , -3.08873  , -2.273509 , -2.9743257, -2.432493 , -2.7084396, -3.0092905],  [-2.307526 , -2.830562 , -2.6859188, -2.3046305, -3.245773 , -2.3726113, -3.0216608, -3.1807368, -2.4968185, -2.9279037, -3.1739795, -3.0200548, -2.4517121, -2.5558155, -2.799468 ],  [-2.63805  , -2.7955067, -3.269197 , -2.7987893, -2.538796 , -2.9416828, -2.951962 , -2.4038363, -3.037779 , -2.4287562, -2.4570413, -2.4905915, -2.7619946, -2.7575805, -2.766189 ],  [-3.007887 , -2.747417 , -2.829557 , -2.6231894, -2.7996604, -2.7106025, -2.890012 , -2.9131544, -2.3879595, -2.061512 , -2.7523618, -2.879992 , -2.7176895, -2.738395 , -3.0365136],  [-2.316058 , -2.4155917, -2.3844392, -3.0136006, -3.08582  , -2.2759366, -3.0576942, -3.1753063, -3.1716983, -2.6030207, -2.8219342, -3.0602698, -2.3294482, -3.0323956, -2.7226417]], [[-2.582789 , -2.5927033, -2.413451 , -2.8939123, -2.574227 , -2.871646 , -2.765913 , -3.1256104, -2.5225024, -2.7181828, -2.7317405, -2.8702831, -2.629619 , -3.3149097, -2.4233727],  [-2.3453438, -2.469705 , -2.7558315, -3.20415  , -2.8730464, -3.1392927, -2.9771514, -2.3443656, -2.7952847, -2.2394648, -2.989643 , -2.9704673, -3.1383295, -2.54716  , -2.5525322],  [-2.5702472, -2.390283 , -2.522116 , -3.2812777, -2.8083847, -2.386569 , -2.4737952, -2.6292253, -3.05751  , -3.2446098, -2.3407946, -2.986484 , -2.651818 , -2.957878 , -2.991576 ],  [-2.68167  , -2.397151 , -2.978469 , -2.643118 , -2.6584067, -2.939581 , -2.7602196, -2.6935802, -2.4133177, -3.0484543, -2.4751244, -2.8919926, -2.6624913, -3.2650952, -2.5236638],  [-2.1907816, -2.4957204, -2.5968368, -2.4816985, -3.0070891, -3.0431855, -2.2397687, -3.0611727, -2.7241764, -2.9184158, -3.078917 , -2.8243747, -2.616219 , -3.013412 , -2.995473 ]], [[-3.1163733, -2.7311769, -2.846274 , -2.345662 , -3.1917503, -3.149846 , -2.865518 , -2.2131302, -2.257694 , -2.7777603, -2.849396 , -2.643986 , -2.692101 , -2.6661098, -2.9292073],  [-2.8374937, -2.7169797, -2.5143898, -3.128592 , -2.9148877, -2.5621166, -2.484052 , -2.5423253, -2.9344416, -2.6991558, -2.9843183, -2.3885188, -2.5291412, -3.264374 , -2.5703046],  [-2.285001 , -2.6421285, -3.172433 , -2.4542122, -2.7490664, -2.9099894, -2.5576186, -2.387632 , -2.5489345, -3.1700683, -2.5671608, -3.084375 , -3.2428524, -3.0238256, -2.5128167],  [-2.2355106, -2.4723008, -2.3125842, -3.0969915, -2.8633833, -2.905198 , -3.0447104, -2.9321346, -2.9769197, -3.0377374, -2.5469568, -2.8529644, -2.5992641, -2.6999688, -2.5855558],  [-3.1630068, -3.1189475, -3.1609302, -2.360886 , -2.6922913, -3.1344225, -2.9012904, -2.7140055, -3.0397575, -2.3043275, -2.350045 , -2.5886765, -2.7949529, -2.4180365, -2.5779345]], [[-2.749304 , -2.730207 , -3.2270617, -2.6502903, -2.6093102, -2.4833887, -2.554749 , -2.3663006, -3.0576618, -2.7508442, -3.1600816, -2.3626091, -2.815207 , -3.2239532, -2.4677496],  [-2.574496 , -2.7775824, -2.1861434, -2.8968027, -2.8815327, -2.805109 , -2.5761886, -3.0220075, -2.5253391, -3.117272 , -2.902959 , -2.9259348, -2.9967594, -2.518907 , -2.4138021],  [-2.818143 , -2.846095 , -2.6852946, -3.101157 , -3.1704652, -3.0197408, -3.0583642, -2.6253686, -2.2923317, -2.3391182, -3.003697 , -2.417698 , -2.257355 , -2.8016677, -2.8589244],  [-3.1718724, -2.7355404, -2.893221 , -2.5733407, -3.1585782, -2.7473938, -2.611573 , -2.823895 , -2.7763605, -2.224919 , -2.4820046, -3.0716043, -2.9258924, -2.4688494, -2.481685 ],  [-3.0051484, -2.9257674, -2.7907817, -2.6448846, -2.5541146, -2.4607494, -2.8171341, -2.8631954, -2.3039882, -2.9740932, -2.672198 , -3.0324578, -2.9643912, -2.39717  , -2.6084898]], [[-2.3649125, -2.2890785, -3.1989598, -3.0515175, -2.6707861, -2.8474002, -3.2424307, -3.0821683, -3.0526414, -2.7324843, -2.572037 , -2.4777308, -2.3616462, -3.048563 , -2.4060254],  [-2.9082448, -3.0510864, -2.836926 , -2.3922477, -2.538669 , -3.0563464, -2.4869952, -2.640915 , -2.2583206, -2.9040933, -3.0362544, -2.6530962, -2.8219924, -2.706577 , -2.7554324],  [-2.3288438, -2.8820438, -3.3002596, -3.110673 , -2.8323169, -2.5344412, -2.6955667, -3.309834 , -2.7435384, -2.4595406, -2.9768705, -2.5839436, -2.400926 , -2.3962667, -2.7336316],  [-3.2719636, -3.2197378, -2.4220507, -2.953262 , -2.363773 , -2.4711452, -3.240694 , -2.566439 , -3.2077332, -3.1547346, -2.4402926, -2.3420413, -2.550241 , -2.5600426, -2.733876 ],  [-2.3518412, -3.144019 , -2.4298868, -2.6161046, -2.8253846, -2.9667323, -2.4877734, -2.7841597, -2.6208858, -2.778662 , -2.6898692, -2.8539817, -3.1504798, -2.555582 , -2.7475064]]],
        # label_probs
        [[-18.016302], [-18.316017], [-18.466013], [-18.622276], [-18.769115]],
        # label_lengths
        [[5], [5], [5], [5], [5]],
        # decoded_labels
        [[[ 3,  7, 10,  8, 11,  0,  0,  0,  0,  0]], [[ 4,  7,  9,  0, 11,  0,  0,  0,  0,  0]], [[ 9,  4,  7, 10, 12,  0,  0,  0,  0,  0]], [[ 1,  8, 10,  8,  2,  0,  0,  0,  0,  0]], [[ 0,  3,  6,  0, 13,  0,  0,  0,  0,  0]]],
    ]
    yield [
        # beam_width, top_paths, max_time, batch_size, num_classes
        10, 10, 10, 5, 15,
        # log_probs_data
        [[[-2.9484625, -2.4731002, -3.0340316, -2.867014 , -3.2557278, -2.985824 , -2.443493 , -2.77247  , -2.5229185, -2.380797 , -2.6703832, -2.4319577, -2.6795876, -2.5017273, -3.230828 ],  [-2.3884964, -2.5916028, -2.6814055, -3.2490027, -2.4763112, -2.4889708, -3.134882 , -2.3288002, -2.2950485, -2.8056805, -2.9175239, -2.7887192, -3.1802342, -3.2043357, -2.8279111],  [-2.9426475, -2.327092 , -2.4767654, -2.9095724, -3.26329  , -2.6162014, -2.8127668, -3.0356042, -2.3264413, -2.4576764, -2.962096 , -2.344969 , -3.207086 , -3.1851277, -2.5374134],  [-2.4324262, -2.8407333, -2.8316662, -3.2214956, -2.5693884, -2.750816 , -3.1117039, -3.1206574, -2.453877 , -3.1550732, -2.6276536, -2.2802446, -2.883161 , -2.453825 , -2.5151753],  [-2.8874528, -3.0829525, -3.0737991, -3.263434 , -2.7023916, -2.659436 , -2.9044387, -2.506902 , -2.809524 , -2.6217597, -2.2887158, -2.306819 , -2.3750937, -2.9817839, -2.7640967]], [[-2.8704767, -2.5755854, -2.4257996, -2.6366692, -2.8804893, -2.635234 , -3.0895813, -3.1570117, -2.8059454, -2.7657506, -2.82443  , -2.4940376, -2.5622091, -2.5997026, -2.5955844],  [-2.7717438, -2.6502497, -3.085602 , -3.0623868, -2.684714 , -2.430054 , -2.722236 , -2.288849 , -2.3395483, -3.2425187, -2.9737482, -2.5695426, -2.767396 , -2.5756185, -3.0179548],  [-2.5005097, -3.055479 , -2.7335176, -3.1668513, -2.9117346, -2.448504 , -2.5092614, -3.128469 , -2.4813528, -2.841256 , -3.1518555, -2.314505 , -2.597894 , -2.715075 , -2.6089358],  [-2.5711405, -3.2433915, -2.5070298, -2.4274194, -2.7309754, -2.9346352, -2.7220924, -2.7583268, -2.7079387, -3.103119 , -2.4766269, -2.7619035, -2.7632604, -2.9773755, -2.359021 ],  [-2.9797564, -2.7905226, -2.9586034, -2.2462509, -2.8219514, -2.6129794, -2.6559415, -2.2443805, -3.0447254, -2.8787646, -3.107434 , -2.7298784, -3.0523326, -2.631824 , -2.428875 ]], [[-2.7579188, -2.7587345, -2.911221 , -3.1658792, -2.8838868, -2.4000938, -2.7128613, -2.7173274, -2.9567175, -2.4711504, -2.4746542, -2.6999142, -2.4534707, -2.7685466, -2.79744  ],  [-2.5723789, -3.190404 , -2.3903427, -2.9700053, -2.927228 , -2.7395232, -3.0854826, -3.0314054, -2.304963 , -2.7912943, -2.5261383, -2.6097064, -2.21947  , -2.9438934, -2.965536 ],  [-2.2404804, -3.0523658, -3.2114706, -2.8071122, -2.4365566, -2.4960642, -3.054637 , -3.1064692, -2.5586982, -3.0467927, -2.4420555, -2.8325224, -2.9217052, -2.809126 , -2.3122482],  [-2.963144 , -3.0463796, -2.459948 , -2.451748 , -2.758424 , -2.361371 , -2.7829933, -2.8720675, -3.0426655, -2.9124777, -2.9403667, -2.52946  , -2.7541685, -2.3016129, -2.9048424],  [-2.5342672, -2.419796 , -2.9394038, -3.1048405, -2.5764625, -3.301358 , -2.494483 , -2.4416332, -2.8545854, -3.135315 , -2.7618172, -2.4635727, -2.758473 , -2.7318826, -2.607479 ]], [[-2.412634 , -2.5863292, -2.9679294, -2.6814575, -2.9086604, -2.4438243, -2.9525354, -2.2583861, -2.4850063, -3.1948984, -2.9048615, -2.7705855, -2.8575335, -2.7121327, -2.9629483],  [-2.3953989, -2.5190454, -2.7942426, -2.965059 , -3.1290221, -3.0350382, -3.0228968, -2.2770205, -2.7474012, -3.0321136, -2.7854488, -2.7664702, -2.6253104, -2.5840516, -2.4332871],  [-2.9822092, -2.841236 , -3.1622908, -2.9129658, -3.1727812, -2.7765212, -3.03542  , -2.9043498, -2.265327 , -2.280503 , -2.6681066, -2.478751 , -2.410121 , -2.711189 , -2.6335967],  [-2.7667527, -3.1319535, -2.334862 , -3.103595 , -2.882658 , -3.1493287, -3.029358 , -2.235358 , -2.7792742, -2.5765982, -2.6121604, -2.3425233, -2.6284802, -2.7154646, -2.9626014],  [-2.7035599, -2.6866853, -3.1396408, -3.1569057, -3.0114727, -2.3651216, -2.596637 , -2.5153682, -2.462041 , -2.8002687, -3.129142 , -2.3162   , -2.7129147, -2.975142 , -2.5940533]], [[-3.177384 , -2.8086853, -2.3620093, -2.661475 , -3.2949593, -2.390337 , -2.7196333, -2.9599378, -2.43301  , -2.6042337, -2.5342016, -2.5817327, -3.1063476, -3.1875699, -2.4672256],  [-2.8122344, -2.3753033, -2.5329127, -3.2633457, -2.5080707, -2.5319996, -3.262717 , -2.7518   , -3.1808333, -2.5364895, -2.5151992, -2.629146 , -2.4683723, -3.0587766, -2.7987854],  [-2.785812 , -2.2681866, -2.293427 , -2.8267448, -3.074629 , -2.6677718, -2.259532 , -2.7582312, -2.4663181, -3.0137954, -2.9827738, -3.079469 , -3.0804205, -2.8535805, -2.8635774],  [-2.519012 , -2.3000169, -2.650666 , -2.5105543, -3.0316184, -2.9286835, -3.1792111, -2.2439065, -2.6587324, -2.8491046, -3.168955 , -2.618393 , -3.2027493, -2.3760204, -3.1811223],  [-2.7752738, -2.5720477, -3.2862844, -2.5150797, -2.4022841, -2.532911 , -2.4282823, -3.116252 , -2.9700205, -2.4336646, -2.645441 , -3.221688 , -2.3898275, -2.966814 , -3.0449495]], [[-2.6925116, -2.280363 , -3.0134146, -2.7175484, -2.820259 , -2.9112298, -2.5308595, -2.7313693, -3.1716661, -2.773802 , -2.4455705, -2.9985383, -2.3172343, -3.1733923, -2.5921252],  [-2.5170162, -2.6517425, -2.6295776, -2.753537 , -2.9323976, -2.4687448, -2.9379158, -2.4069138, -2.3487668, -3.2599752, -2.4204857, -2.702651 , -3.168098 , -3.105009 , -2.8960423],  [-2.2554314, -2.4175067, -2.8557544, -3.0212805, -3.0463803, -2.9754157, -2.7341228, -3.1568513, -3.1690488, -3.036765 , -2.584991 , -2.5452914, -2.5753345, -2.307026 , -2.6017487],  [-2.7978191, -2.405174 , -2.8369606, -2.1589303, -2.7955732, -2.915939 , -2.6995568, -2.882506 , -2.653874 , -2.687221 , -2.545072 , -2.6698265, -2.9520059, -3.072069 , -2.9651394],  [-3.2002072, -3.2335503, -2.2497206, -2.4421728, -2.5082405, -2.4129944, -2.582971 , -2.9001155, -2.797041 , -2.9404638, -2.5094092, -2.6062584, -3.1549163, -2.6572428, -3.1198642]], [[-2.2750664, -2.5967171, -2.6587539, -2.9466643, -2.5740075, -2.587417 , -2.5226734, -3.0012145, -2.8621867, -2.9994526, -2.9635975, -2.9250557, -3.0543282, -2.1597965, -3.1242113],  [-2.8461154, -2.6939938, -2.9165425, -2.8538814, -2.4811733, -2.8300843, -2.774282 , -2.2739868, -2.8946874, -2.7373135, -2.397102 , -2.832442 , -3.1140335, -2.3301659, -3.146101 ],  [-3.2321303, -2.9960742, -2.6730006, -2.3342052, -3.1296556, -2.9882069, -2.2876596, -2.3489778, -2.549971 , -3.1626275, -2.464543 , -2.7711017, -3.1236312, -2.3476353, -3.0813012],  [-2.704236 , -3.0581474, -2.3618355, -2.7701554, -2.9067721, -2.5044684, -2.3307219, -2.8246508, -2.446504 , -2.965308 , -3.0557988, -3.056153 , -3.2656956, -2.3434155, -2.6619003],  [-2.9824271, -3.0630088, -2.3157492, -2.6056433, -2.971223 , -2.6793666, -2.8112488, -2.564328 , -2.836166 , -2.8634129, -2.9225175, -2.8359046, -2.621448 , -2.3861706, -2.5229602]], [[-2.4843245, -2.9594073, -2.9756732, -3.1037173, -3.2342532, -3.1099913, -2.9072824, -2.3323705, -3.2905378, -2.429141 , -2.5465422, -2.554329 , -2.5375912, -2.5346465, -2.3708227],  [-2.6072655, -2.8964586, -2.6021943, -2.8297071, -3.0345178, -2.6093087, -2.2925434, -2.4173799, -3.0080166, -2.8367383, -2.600967 , -2.5150502, -3.2277648, -2.7243972, -2.8514795],  [-2.2936947, -2.6313474, -2.997881 , -2.93279  , -2.365589 , -2.9214091, -2.680524 , -2.3360934, -3.2153687, -2.8144286, -3.2243073, -2.925347 , -2.5900514, -2.773185 , -2.5255647],  [-3.119751 , -2.5566955, -2.996932 , -2.4553118, -2.909308 , -2.3702912, -2.7392776, -2.6084113, -3.1580062, -2.7062645, -2.4105415, -3.1610699, -2.4095519, -2.5930967, -2.992288 ],  [-3.087249 , -2.4539976, -2.913275 , -2.5176597, -2.7000523, -2.2941778, -3.10534  , -2.831093 , -2.5422173, -3.0068011, -2.8984787, -2.8706212, -2.2706745, -2.541399 , -3.2248197]], [[-2.7619205, -2.4790628, -2.6496477, -2.447387 , -3.0005555, -2.851901 , -2.4129639, -2.440668 , -3.0484548, -2.7962408, -2.8812509, -2.460321 , -3.1211338, -2.963338 , -2.71856  ],  [-2.8814533, -3.0390787, -2.3780308, -2.9892669, -2.4965804, -2.9163558, -3.2969108, -3.1494143, -2.6755881, -2.4456756, -2.8740551, -2.4781256, -2.7119272, -2.591152 , -2.3086734],  [-2.4749331, -2.4286993, -3.1337457, -3.1848547, -2.4196243, -2.3548918, -2.5619678, -2.61765  , -2.9317212, -2.640898 , -3.0568829, -2.8371775, -2.3481596, -3.1310349, -3.2362478],  [-2.8314202, -2.531675 , -3.25749  , -2.4742079, -2.7701845, -2.7326505, -2.482867 , -2.5396705, -2.8208325, -3.2681742, -2.360028 , -2.95435  , -3.0702035, -2.6252468, -2.4564154],  [-2.6847594, -3.0404632, -3.2100346, -2.5382838, -2.5809348, -2.4587574, -2.2577534, -3.0283191, -2.6006465, -2.2599359, -2.7715673, -2.9416   , -3.1462712, -2.7479453, -3.008484 ]], [[-3.083144 , -3.2181525, -2.53641  , -2.8148704, -2.527176 , -2.4750583, -3.2396433, -2.9240167, -2.2971716, -2.8289037, -2.4058971, -3.1750195, -2.285742 , -2.5315886, -3.0938632],  [-2.6710386, -2.4698365, -2.519063 , -2.6913805, -2.982708 , -2.9449697, -3.151375 , -2.2969904, -2.6930609, -2.6801076, -3.0772612, -3.178881 , -2.8472238, -2.5303154, -2.4112923],  [-2.871808 , -2.6127806, -2.9108267, -2.9712307, -2.32311  , -2.7010207, -2.331938 , -3.3132575, -2.7831333, -2.9939966, -2.4355543, -2.572158 , -2.7393742, -2.5114362, -3.1195152],  [-2.7897577, -2.4048963, -2.9493613, -2.5384405, -2.495987 , -3.0743523, -2.9525273, -3.0287147, -3.1159725, -2.8360677, -2.501491 , -2.472979 , -2.3752894, -2.595986 , -2.9786937],  [-3.1982343, -2.2911046, -2.6378965, -2.3431807, -3.1957226, -2.9987147, -2.7399807, -2.3130631, -3.1368642, -2.9927347, -3.1061153, -2.4724545, -2.6881754, -2.9166873, -2.393362 ]]],
        # label_probs
        [[-19.51219 , -19.608488, -19.634602, -19.697807, -19.709236, -19.713684, -19.817963, -19.87734 , -19.887123, -19.888771], [-18.419703, -18.569258, -18.751774, -18.79747 , -18.900478, -19.001127, -19.010353, -19.089733, -19.146904, -19.1832  ], [-18.410612, -18.646536, -18.667973, -18.692287, -18.751965, -18.86927 , -19.019083, -19.019114, -19.02794 , -19.09082 ], [-18.693548, -18.717577, -18.8078  , -18.990118, -19.007511, -19.138367, -19.142073, -19.167973, -19.171679, -19.20157 ], [-18.838976, -18.875505, -18.91394 , -19.061426, -19.118155, -19.140112, -19.17023 , -19.183235, -19.19664 , -19.240192]],
        # label_lengths
        [[5, 5, 5, 6, 6, 5, 6, 5, 6, 5], [5, 5, 4, 4, 5, 4, 5, 5, 4, 5], [5, 5, 5, 5, 4, 5, 5, 5, 5, 4], [6, 5, 5, 5, 5, 6, 6, 6, 6, 6], [4, 4, 5, 5, 5, 5, 5, 4, 4, 4]],
        # decoded_labels
        [[[11,  5,  2, 13,  2,  0,  0,  0,  0,  0],  [ 9,  2,  5,  1,  7,  0,  0,  0,  0,  0],  [11,  5,  2, 13,  3,  0,  0,  0,  0,  0],  [ 9,  2,  5,  1,  7, 12,  0,  0,  0,  0],  [ 9,  2,  5,  1,  7,  8,  0,  0,  0,  0],  [11,  5,  2, 13,  7,  0,  0,  0,  0,  0],  [ 9,  2,  5,  1,  7, 10,  0,  0,  0,  0],  [11,  5,  2, 13, 12,  0,  0,  0,  0,  0],  [ 9,  2,  5,  1,  7,  5,  0,  0,  0,  0],  [11,  5,  2, 13,  8,  0,  0,  0,  0,  0]], [[ 8,  7,  1,  7,  2,  0,  0,  0,  0,  0],  [ 8,  7,  1,  7,  9,  0,  0,  0,  0,  0],  [ 8,  7,  1, 13,  0,  0,  0,  0,  0,  0],  [ 8,  7,  1,  7,  0,  0,  0,  0,  0,  0],  [ 8,  7,  1,  7, 11,  0,  0,  0,  0,  0],  [ 8,  7,  1, 10,  0,  0,  0,  0,  0,  0],  [ 8,  7,  1, 13,  7,  0,  0,  0,  0,  0],  [ 8,  7,  1, 10,  7,  0,  0,  0,  0,  0],  [ 8,  7,  1, 11,  0,  0,  0,  0,  0,  0],  [ 8,  7,  1, 13,  1,  0,  0,  0,  0,  0]], [[ 8, 11,  1,  7,  4,  0,  0,  0,  0,  0],  [ 8, 11,  1,  7,  1,  0,  0,  0,  0,  0],  [ 8, 11,  1,  7,  5,  0,  0,  0,  0,  0],  [ 8, 11,  1,  7, 12,  0,  0,  0,  0,  0],  [ 8, 11,  6,  4,  0,  0,  0,  0,  0,  0],  [ 8, 11,  1,  7,  0,  0,  0,  0,  0,  0],  [ 8, 11,  6,  4,  6,  0,  0,  0,  0,  0],  [ 8, 11,  6,  0,  4,  0,  0,  0,  0,  0],  [ 8, 11,  6,  0,  6,  0,  0,  0,  0,  0],  [ 8, 11,  6,  0,  0,  0,  0,  0,  0,  0]], [[11,  3,  7,  3, 13, 10,  0,  0,  0,  0],  [11,  3,  7,  3, 10,  0,  0,  0,  0,  0],  [11,  3,  7,  3, 13,  0,  0,  0,  0,  0],  [11,  3,  7,  3,  6,  0,  0,  0,  0,  0],  [11,  3,  7,  3, 12,  0,  0,  0,  0,  0],  [11,  3,  7,  3, 13, 12,  0,  0,  0,  0],  [11,  3,  7,  3,  6, 12,  0,  0,  0,  0],  [11,  3,  7,  3, 13,  1,  0,  0,  0,  0],  [11,  3,  7,  3,  6,  1,  0,  0,  0,  0],  [11,  3,  7,  3, 10, 12,  0,  0,  0,  0]], [[ 7,  6,  2,  3,  0,  0,  0,  0,  0,  0],  [ 7,  6,  2,  5,  0,  0,  0,  0,  0,  0],  [ 7,  6,  2, 12,  6,  0,  0,  0,  0,  0],  [ 7,  6,  2, 12,  9,  0,  0,  0,  0,  0],  [ 7,  6,  2,  5,  1,  0,  0,  0,  0,  0],  [ 7,  6,  2,  5,  7,  0,  0,  0,  0,  0],  [ 7,  6,  2,  5,  3,  0,  0,  0,  0,  0],  [ 7,  6,  2,  8,  0,  0,  0,  0,  0,  0],  [ 7,  6,  2,  1,  0,  0,  0,  0,  0,  0],  [ 7,  6,  2, 13,  0,  0,  0,  0,  0,  0]]],
    ]
    # yapf:enable


@pytest.mark.parametrize("reference_data", list(reference_data_generator()))
def test_ctc_beam_search_decoder(op_tester, reference_data):
    """Test that the CTC beam search decoder is interfaced correctly.

    Rigorous tests for correctness are done lower in the stack, here only the 
    interface to the decoder is tested. 
    """
    (beam_width, top_paths, max_time, batch_size, num_classes, log_probs_data,
     target_label_probs, target_label_lengths,
     target_decoded_labels) = reference_data

    blank = num_classes - 1

    # Input data.
    log_probs_data = np.array(log_probs_data, dtype=np.float32)
    data_lengths_data = np.full((batch_size, ), max_time, np.uint32)

    # Output reference data.
    target_label_probs = np.array(target_label_probs, dtype=np.float32)
    target_label_lengths = np.array(target_label_lengths, dtype=np.uint32)
    target_decoded_labels = np.array(target_decoded_labels, dtype=np.uint32)

    def init_builder(builder):
        log_probs = builder.addInputTensor(log_probs_data)
        data_lengths = builder.addInputTensor(data_lengths_data)

        (label_probs, label_lengths,
         decoded_labels) = builder.aiGraphcore.ctcbeamsearchdecoder(
             [log_probs, data_lengths], blank, beam_width, top_paths)

        builder.addOutputTensor(label_probs)  # batchSize, topPaths
        builder.addOutputTensor(label_lengths)  # batchSize, topPaths
        builder.addOutputTensor(decoded_labels)  # batchSize, topPaths, maxTime

        return [label_probs, label_lengths, decoded_labels]

    def reference(ref_data):
        # The data in decoded_labels after the indices specified in
        # label_lengths is arbitrary, and should not be used for testing. Here
        # we substitute this data in the target_decoded_labels with the one that
        # was generated by our CTC decoder.
        decoded_labels_mask = np.zeros((batch_size, top_paths, max_time),
                                       dtype=np.bool)
        for p in range(top_paths):
            for b in range(batch_size):
                decoded_labels_mask[b, p, target_label_lengths[b, p]:] = 1
        # Copy the unwanted decoded_labels from our CTC decoder to the reference
        # data.
        decoded_labels = ref_data.getOutputTensor(2)
        target_decoded_labels[decoded_labels_mask] = decoded_labels[
            decoded_labels_mask]

        return [
            target_label_probs, target_label_lengths, target_decoded_labels
        ]

    op_tester.setPatterns([], enableRuntimeAsserts=False)
    op_tester.run(init_builder, reference, step_type='infer')
